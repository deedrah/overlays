diff --git a/src/python/grpcio/grpc/_cython/_cygrpc/grpc.pxi b/src/python/grpcio/grpc/_cython/_cygrpc/grpc.pxi
index e71d3e7..96d32ca 100644
--- a/src/python/grpcio/grpc/_cython/_cygrpc/grpc.pxi
+++ b/src/python/grpcio/grpc/_cython/_cygrpc/grpc.pxi
@@ -66,6 +66,7 @@ cdef extern from "grpc/grpc.h":
     pass
 
   grpc_slice grpc_slice_ref(grpc_slice s) nogil
+  grpc_slice grpc_slice_copy(grpc_slice s) nogil
   void grpc_slice_unref(grpc_slice s) nogil
   grpc_slice grpc_empty_slice() nogil
   grpc_slice grpc_slice_new(void *p, size_t len, void (*destroy)(void *)) nogil
diff --git a/src/python/grpcio/grpc/_cython/_cygrpc/records.pyx.pxi b/src/python/grpcio/grpc/_cython/_cygrpc/records.pyx.pxi
index c3d158d..2de774e 100644
--- a/src/python/grpcio/grpc/_cython/_cygrpc/records.pyx.pxi
+++ b/src/python/grpcio/grpc/_cython/_cygrpc/records.pyx.pxi
@@ -36,9 +36,10 @@ cdef bytes _slice_bytes(grpc_slice slice):
   return (<const char *>start)[:length]
 
 cdef grpc_slice _copy_slice(grpc_slice slice) nogil:
-  cdef void *start = grpc_slice_start_ptr(slice)
-  cdef size_t length = grpc_slice_length(slice)
-  return grpc_slice_from_copied_buffer(<const char *>start, length)
+  #cdef void *start = grpc_slice_start_ptr(slice)
+  #cdef size_t length = grpc_slice_length(slice)
+  #return grpc_slice_from_copied_buffer(<const char *>start, length)
+  return grpc_slice_copy(slice)
 
 cdef grpc_slice _slice_from_bytes(bytes value) nogil:
   cdef const char *value_ptr
@@ -494,6 +495,9 @@ cdef class Metadata:
       # this frees the allocated memory for the grpc_metadata_array (although
       # it'd be nice if that were documented somewhere...)
       # TODO(atash): document this in the C core
+      #for i in range(self.c_metadata_array.count):
+      #  grpc_slice_unref(self.c_metadata_array.metadata[i].key)
+      #  grpc_slice_unref(self.c_metadata_array.metadata[i].value)
       grpc_metadata_array_destroy(&self.c_metadata_array)
       grpc_shutdown()
 
@@ -521,10 +525,11 @@ cdef class Metadata:
           self.c_metadata_array.metadata[i].key)
       new_c_metadata_array.metadata[i].value = _copy_slice(
           self.c_metadata_array.metadata[i].value)
+      #grpc_slice_unref(self.c_metadata_array.metadata[i].key)
+      #grpc_slice_unref(self.c_metadata_array.metadata[i].value)
     grpc_metadata_array_destroy(&self.c_metadata_array)
     self.c_metadata_array = new_c_metadata_array
 
-
 cdef class Operation:
 
   def __cinit__(self):
